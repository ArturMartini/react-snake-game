{"version":3,"sources":["components/Header/index.js","components/Footer/index.js","components/Board/index.js","App.js","index.js"],"names":["Header","className","Footer","Board","rects","rect","rectPoint","active","interval","timeInterval","state","board","width","height","style","border","borderRadius","borderColor","snake","x","y","size","color","move","direction","lost","point","initializeRects","walker","isLostMove","leader","length","isLostMovement","isInvalidMovement","setState","ref","stateRects","forEach","r","push","checkKillPoint","idx","id","moveRef","newPoint","getRandomPosition","clearInterval","setInterval","invalid","getMovement","event","dir","key","isInvalid","Math","floor","random","Array","from","map","_","i","window","addEventListener","this","node","fill","shadowBlur","name","fontSize","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e295021.chunk.js","sourcesContent":["import React from 'react'\nimport \"./styles.css\"\n\nconst Header = () => (\n    <header className=\"main-header\">React Snake Game</header>\n);\n\nexport default Header","import React from 'react'\nimport \"./styles.css\"\n\nconst Footer = () => (\n    <footer className=\"main-footer\">Created by Artur Martini - 2020</footer>\n);\n\nexport default Footer","import React, { Component } from 'react'\nimport { Stage, Layer, Rect } from 'react-konva'\nimport \"./styles.css\"\n\n\nconst DirectionUp = 1\nconst DirectionDown = 2\nconst DirectionRight = 3\nconst DirectionLeft = 4\nconst size = 50\n\nexport default class Board extends Component {\n    rects = []\n    rect = {};\n    rectPoint = {};\n    active = true\n    interval = -1\n    timeInterval = 1000\n    state = {\n        board: {\n            width: 500,\n            height: 500,\n            style: {\n                border: '10px solid #9f4acf',\n                borderRadius: '1px',\n                borderColor: 'aqua',\n                height: '520px'\n            }\n        },\n        snake: {\n            x: 0,\n            y: 0,\n            size: size,\n            color: 'blue',\n            move: 0,\n            direction: DirectionRight,\n            lost: false,\n        },\n        point: {\n            x: 400,\n            y: 300,\n            size: size,\n            color: 'black',\n        },\n        rects: this.initializeRects()\n    }\n\n    initializeRects() {\n        return Array.from({ length: 1 }).map((_, i) => ({\n            x: 0,\n            y: 0,\n            active: true,\n            id: \"rect:0\",\n            direction: DirectionRight,\n            size: size,\n            color: 'blue',\n            lost: false\n        }))\n    }\n\n    componentDidMount() {\n        window.addEventListener(\"keyup\", this.getMovement)\n        this.interval = setInterval(this.walker, this.timeInterval)\n    }\n\n    walker = () => {\n        const { rects } = this.state\n        var move = 0;\n        var isInvalidMove = false\n        var isLostMove = false\n        var leader = {\n            x: rects[rects.length - 1].x,\n            y: rects[rects.length - 1].y,\n            direction: rects[rects.length - 1].direction\n        }\n        var direction = leader.direction\n\n        if (DirectionRight === leader.direction) {\n            move = leader.x + size\n            if (this.isLostMovement(move) || this.isInvalidMovement(move, leader.y)) {\n                isLostMove = true\n            }\n        }\n\n        if (DirectionLeft === leader.direction) {\n            move = leader.x - size\n            if (this.isLostMovement(move) || this.isInvalidMovement(move, leader.y)) {\n                isLostMove = true\n            }\n        }\n\n        if (DirectionUp === leader.direction) {\n            move = leader.y - size\n            if (this.isLostMovement(move) || this.isInvalidMovement(leader.x, move)) {\n                isLostMove = true\n            }\n        }\n\n        if (DirectionDown === leader.direction) {\n            move = leader.y + size\n            if (this.isLostMovement(move) || this.isInvalidMovement(leader.x, move)) {\n                isLostMove = true\n            }\n        }\n\n        if (isLostMove) {\n            this.active = false\n        }\n\n        this.move(rects, direction)\n        this.setState(this.state.rects)\n    }\n\n    move = (rects, direction) => {\n        var ref = {\n            x: rects[rects.length - 1].x,\n            y: rects[rects.length - 1].y,\n            direction: rects[rects.length - 1].direction,\n            color: \"blue\",\n        }\n        var stateRects = []\n\n        rects.forEach((r) => {\n            stateRects.push({\n                x: r.x,\n                y: r.y\n            })\n        })\n\n        if (DirectionUp === direction) {\n            ref.y -= size\n        }\n        if (DirectionDown === direction) {\n            ref.y += size\n        }\n        if (DirectionRight === direction) {\n            ref.x += size\n        }\n        if (DirectionLeft === direction) {\n            ref.x -= size\n        }\n        var hasPoint = this.checkKillPoint(rects, ref)\n        if (!hasPoint) {\n            if (rects.length > 1) {\n                for (let idx = rects.length - 1; idx > 0; idx--) {\n                    rects[idx - 1].x = stateRects[idx].x\n                    rects[idx - 1].y = stateRects[idx].y\n                }\n            }\n            rects[rects.length - 1] = {\n                x: ref.x,\n                y: ref.y,\n                direction: ref.direction,\n                id: rects[rects.length - 1].id,\n                color: \"blue\"\n            }\n        } else {\n            return\n        }\n    }\n\n    checkKillPoint = (rects, moveRef) => {\n        const { point } = this.state\n        if (moveRef.x === point.x && moveRef.y === point.y) {\n            rects.push({\n                x: point.x,\n                y: point.y,\n                direction: moveRef.direction,\n                active: true,\n                color: \"blue\",\n                size: size,\n                id: \"rect:\" + (rects.length)\n            })\n            var newPoint = this.getRandomPosition(point)\n            point.x = newPoint.x\n            point.y = newPoint.y\n            clearInterval(this.interval)\n            this.timeInterval = this.timeInterval * 0.95\n            this.interval = setInterval(this.walker, this.timeInterval)\n            return true\n        }\n        return false\n    }\n\n\n    isLostMovement = (move) => {\n        const size = this.state.board.width - this.state.snake.size\n        if (move >= 0 && move <= size) {\n            return false\n        }\n        return true\n    }\n\n    isInvalidMovement = (x, y) => {\n        const { rects } = this.state\n        var invalid = false\n        rects.forEach((r) => {\n            if (x === r.x && y === r.y) {\n                invalid = true\n            }\n        })\n        return invalid\n    }\n\n\n    getMovement = (event) => {\n        const { rects } = this.state\n        var dir = 0\n        if (event.key === \"ArrowUp\") {\n            dir = DirectionUp\n        }\n\n        if (event.key === \"ArrowDown\") {\n            dir = DirectionDown\n        }\n\n        if (event.key === \"ArrowLeft\") {\n            dir = DirectionLeft\n        }\n\n        if (event.key === \"ArrowRight\") {\n            dir = DirectionRight\n        }\n        rects[rects.length - 1].direction = dir\n        return rects\n    }\n\n    getRandomPosition = (point) => {\n        var isInvalid = true\n        var x = 0\n        var y = 0\n        while (isInvalid) {\n            x = (Math.floor(Math.random() * 10) + 0) * 50\n            y = (Math.floor(Math.random() * 10) + 0) * 50\n            this.state.rects.forEach((rect) => {\n                if (x !== rect.x && y !== rect.y) {\n                    isInvalid = false\n                }\n            });\n\n            if (x !== point.x && y !== point.y) {\n                isInvalid = false\n            } else {\n                isInvalid = true\n            }\n        }\n        return {\n            x: x,\n            y: y,\n        };\n    }\n\n    render() {\n        const { point, board, rects } = this.state\n        if (this.active === true) {\n            return (\n                <div className=\"board\">\n                    <Stage width={board.width} height={board.height} style={board.style} >\n                        <Layer>\n                            {rects.map((rect) => {\n                                return (\n                                    <Rect ref={node => (this.rects[rects.length - 1] = node)}\n                                        key={`${rect.id}`}\n                                        x={rect.x}\n                                        y={rect.y}\n                                        width={size}\n                                        height={size}\n                                        fill=\"blue\"\n                                        shadowBlur={5}\n                                    />\n                                )\n                            })}\n                            <Rect ref={node => (this.rectPoint = node)}\n                                x={point.x}\n                                y={point.y}\n                                width={point.size}\n                                height={point.size}\n                                fill={point.color}\n                                shadowBlur={5}\n                                name=\"point\"\n                            />\n                        </Layer>\n                    </Stage>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"board\">\n                    <p style={{ fontSize: 100 }}>YOU LOST!</p>\n                </div>\n            )\n        }\n    }\n}","import React from 'react';\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Board from './components/Board'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Board/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"./styles.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}